from NetworkManagement.Domain.AnalyseIPInterface import AnalyseIPInterface
from Shared.Infrastructure.Postgres.PostgresConnection import PostgresConnection
from Shared.Infrastructure.Postgres.AnalyseIPRepository import AnalyseIPRepository
import concurrent.futures
import os
from NetworkManagement.Infraestructure.Autonmap import Autonmap


class AnalyseIPExe(AnalyseIPInterface):
    def analyze(self):
        postgress_connection = PostgresConnection()
        postgress_connection.connect()

        operation = AnalyseIPRepository(postgress_connection)
        ips = operation.get_ip()

        num_workers = os.cpu_count() * 4
        with concurrent.futures.ThreadPoolExecutor(max_workers=num_workers) as executor:
            future_to_ip = {executor.submit(
                Autonmap.minimal, ip[0]): ip for ip in ips}
            for future in concurrent.futures.as_completed(future_to_ip):
                ip = future_to_ip[future]
                try:
                    data = future.result()
                    print(f"Análisis completado para {ip}", data)
                except Exception as exc:
                    raise Exception(f'{ip} generó una excepción', exc)
