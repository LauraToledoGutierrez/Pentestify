from NetworkManagement.Domain.AnalyseWPinterface import AnalyseWPInterface
from NetworkManagement.Domain.WpInfo import WpInfo
import subprocess
import json
import tempfile


class AnalyseWPExe(AnalyseWPInterface):
    def analyse(self, domain):
        print("Running WPScan")
        ruta_output = tempfile.mktemp(suffix=".json")
        ruta_clean_output = tempfile.mktemp(suffix=".json")

        command = ['wpscan', '--url', domain, '--enumerate', 'vp', '--format', 'json', '--output',
                   ruta_output]
        try:
            subprocess.run(command, capture_output=True, text=True, check=True)
            print("WPScan executed successfully.")
            cleaned_data = self.clean_data(ruta_output, ruta_clean_output)
            return cleaned_data
        except subprocess.CalledProcessError as e:
            raise Exception(f"Error occurred while running WPScan: {e.stderr}")
            return ""
        except FileNotFoundError:
            raise Exception("WPScan not found. Please install WPScan.")
            return ""

    def clean_data(self, input_path, output_path):
        with open(input_path, 'r') as file:
            data = json.load(file)

        new_json = self.transform_data(data)

        with open(output_path, 'w') as file:
            json.dump(new_json.to_dict(), file, indent=4)

        print("WPScan output cleaned successfully.")
        return new_json

    def transform_data(self, data):

        to_s_list = [finding["to_s"]
                     for finding in data["interesting_findings"] if "to_s" in finding]
        metasploit_list = [finding["references"]["metasploit"] for finding in data["interesting_findings"] if
                           "metasploit" in finding["references"]]

        return WpInfo(
            to_s=to_s_list,
            metasploit=metasploit_list,
            version_number=data["version"]["number"],
            version_status=data["version"]["status"]
        )
