import json
from typing import List

from Shared.Domain.Event import Event
from Shared.Domain.EventBusInterface import EventBusInterface
from Shared.Domain.Events.EventTypeException import EventTypeException


class InMemoryEventBus(EventBusInterface):
    # event_types: Dict[str,Event] = {}
    def __init__(self):
        self.events = []

    def send_event(self, event: Event):
        print("InMemoryEventBus -> Send: Type: {}, Payload: {}".format(event.type.value, event.payload))
        self.events.append({
            'type': event.type.value,
            'payload': json.dumps(event.payload)
        })

    def receive_events(self) -> List[Event]:
        events = []
        while len(self.events) > 0:
            event_data = self.events.pop(0)
            event_type = event_data['type']
            if event_type not in self.event_types:
                raise EventTypeException('Event Type not found for event type %s' % event_type)

            event = self.event_types[event_type].fromJson(data=json.loads(event_data['payload']))

            events.append(event)
        return events
