import json
from datetime import datetime

from Shared.Domain.Event import Event
from Shared.Domain.EventBusInterface import EventBusInterface
from Shared.Domain.Events.EventTypeException import EventTypeException
import boto3


class SQSEventBus(EventBusInterface):
    def __init__(self, queue_url):
        self.sqs = boto3.client('sqs')
        self.queue_url = queue_url

    def send_event(self, event: Event):
        print("SQSEventBus -> Send: Type: {}, Payload: {}, Timestamp: {}".format(
            event.type.value, event.payload, datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")))
        self.sqs.send_message(
            QueueUrl=self.queue_url,
            MessageBody=json.dumps(event.payload),
            MessageAttributes={
                'type': {
                    'StringValue': event.type.value,
                    'DataType': 'String'
                }
            }
        )

    def receive_events(self):
        response = self.sqs.receive_message(
            QueueUrl=self.queue_url,
            MaxNumberOfMessages=10,
            MessageAttributeNames=['All']
        )

        messages = response['Messages'] if 'Messages' in response else []
        events = []
        for message in messages:
            event_type = message['MessageAttributes']['type']['StringValue']
            if event_type not in self.event_types:
                raise EventTypeException('Event Type not found for event type %s' % event_type)

            event = self.event_types[event_type].fromJson(data=json.loads(message['Body']))

            events.append(event)
            self.sqs.delete_message(
                QueueUrl=self.queue_url,
                ReceiptHandle=message['ReceiptHandle']
            )
            events.append(event)
        return events
