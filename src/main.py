import datetime
import random
import string
import threading
import time
from typing import Dict

from NetworkManagement.Application.AnalyseIP import AnalyseIP
from NetworkManagement.Application.DiscoverSubdomains import DiscoverSubdomains
from NetworkManagement.Domain.AnalyseIPInterface import AnalyseIPInterface
from NetworkManagement.Infraestructure.DNSManagerRepository import DnsManagerRepository
from NetworkManagement.Infraestructure.ExtractDomainHarvester import ExtractDomainHarvester
from Shared.Domain.Event import Event
from Shared.Domain.EventHandler import EventHandler
from Shared.Domain.EventType import EventType
from Shared.Domain.Events.DomainAddEvent import DomainAddEvent
from Shared.Infrastructure.Events.DomainAddHandler import DomainAddHandler
from Shared.Infrastructure.Events.SQSEventBus import SQSEventBus
from Shared.Infrastructure.Events.IpAddressFoundHandler import IpAddressFoundHandler

event_bus = SQSEventBus("https://sqs.eu-west-3.amazonaws.com/240514672475/pentestify-staging_messenger")
analyse_ips = AnalyseIP(AnalyseIPInterface())
discover_subdomains = DiscoverSubdomains(ExtractDomainHarvester(), DnsManagerRepository())


event_handlers: Dict[EventType, EventHandler] = {
    EventType.DOMAIN_ADD.value: DomainAddHandler(event_bus, discover_subdomains),
    EventType.DOMAIN_DISCOVERED.value: IpAddressFoundHandler(event_bus, analyse_ips)
}


def generate_random_domain():
    # Genera una cadena aleatoria de 10 caracteres
    domain_name = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))
    # Agrega el sufijo .com
    domain_name += ".com"
    return domain_name


def handle_event(event: Event):
    if event.type.value not in event_handlers:
        print(f"No handler found for event {event.type}")
    event_handlers[event.type.value].handle(event)


def main():
    try:
        print("Initializing...")
        last_execute = 0
        while True:
            # try:
            events = event_bus.receive_events()
            for event in events:
                threading.Thread(target=handle_event, args=(event,)).start()

            if (datetime.datetime.now().timestamp() - last_execute) > 60:
                domain = "homecontrol.tech"
                event_bus.send_event(DomainAddEvent(domain))
                last_execute = datetime.datetime.now().timestamp()
            time.sleep(5)
        # except Exception as e:
        #     print(f"Error occurred in main execution", e)

        # postgres_connection = PostgresConnection()
        # postgres_connection.connect()
        #
        # theharvester = ExtractDomainExe()
        # theharvesterService = ExtractDomain(theharvester)
        # theharvesterService.execute("homecontrol.tech")
        #
        # initial_subdomain_repository = InitialSubdomainRepository(postgres_connection)
        # clean_subdomains_repository = CleanSubdomainsRepository()
        # clean_subdomain = CleanSubdomain(clean_subdomains_repository, initial_subdomain_repository)
        # clean_subdomain.execute()
        #
        # analyse_ip_exe = AnalyseIPExe()
        # analyse_ip_service = AnalyseIP(analyse_ip_exe)
        # analyse_ip_service.execute()
        #
        # getports = GetPortsExe()
        # get_ports_service = GetPorts(getports)
        # ports = get_ports_service.execute(postgres_connection)

    except Exception as e:
        print("Error occurred in main execution", e)


if __name__ == "__main__":
    print("Starting.. ")
    # while True:
    main()
    # sleep(60)
    print("Finishing.. ")
