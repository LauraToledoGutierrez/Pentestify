from http.server import HTTPServer, SimpleHTTPRequestHandler
from Report.Application.GenerateReport import GenerateReport
from Report.Infrastructure.Template.TemplateRender import TemplateRender
from Shared.Infrastructure.Postgres.PostgresConnection import PostgresConnection
from Shared.Infrastructure.Postgres.SubdomainRepository import SubdomainRepository
from Shared.Infrastructure.Postgres.PortRepository import PortRepository
from Shared.Infrastructure.Postgres.WorpressRepository import WordpressRepository


class MyHandler(SimpleHTTPRequestHandler):

    def __init__(self, render_service, *args, **kwargs):
        self.renderer_service = render_service
        super().__init__(*args, **kwargs)

    def do_GET(self):
        domain = "homecontrol.tech"
        if self.path == '/':
            webpage = self.renderer_service.execute("template.html", domain)
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(webpage.encode('utf-8'))
        else:
            return SimpleHTTPRequestHandler.do_GET(self)


def setup():
    db_connection = PostgresConnection()
    db_connection.connect()
    subdomain_repository = SubdomainRepository(db_connection)
    port_repository = PortRepository(db_connection)
    wordpress_repository = WordpressRepository(db_connection)
    renderer = TemplateRender()
    renderer_service = GenerateReport(
        subdomain_repository, port_repository, wordpress_repository, renderer)
    return renderer_service


def run(server_class=HTTPServer, handler_class=MyHandler, port=8000):
    renderer_service = setup()
    server_address = ('', port)
    httpd = server_class(server_address, lambda *args, **
                         kwargs: handler_class(renderer_service, *args, **kwargs))
    print(f"Servidor iniciado en http://localhost:{port}/")
    httpd.serve_forever()


if __name__ == "__main__":
    run()
