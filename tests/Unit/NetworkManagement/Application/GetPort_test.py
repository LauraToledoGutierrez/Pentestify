
import unittest
from unittest.mock import MagicMock
from NetworkManagement.Application.GetPort import GetPorts, PortInfo
from NetworkManagement.Domain.GetPortsInterface import GetPortsInterface
from Shared.Infrastructure.Postgres.PostgresConnection import PostgresConnection


class GetPort_test(unittest.TestCase):
    def setUp(self):
        self.mock_get_ports_interface = MagicMock(GetPortsInterface)
        self.postgres_connection = PostgresConnection()
        self.postgres_connection.connect()

    def test_execute_successful(self):
        self.mock_get_ports_interface.execute.return_value = [
            PortInfo("192.168.1.1", 80, "tcp", "HTTP", "Apache", "2.4"),
            PortInfo("192.168.1.2", 443, "tcp", "HTTPS", "Nginx", "1.18")
        ]
        get_ports = GetPorts(self.mock_get_ports_interface)

        result = get_ports.execute(self.postgres_connection)

        expected_result = [
            PortInfo("192.168.1.1", 80, "tcp", "HTTP", "Apache", "2.4"),
            PortInfo("192.168.1.2", 443, "tcp", "HTTPS", "Nginx", "1.18")
        ]

        # Comparaci√≥n de elementos en lugar de igualdad de objetos
        assert len(result) == len(expected_result)
        for res, exp in zip(result, expected_result):
            assert res.ip_address == exp.ip_address
            assert res.port_number == exp.port_number
            assert res.protocol == exp.protocol
            assert res.service_name == exp.service_name
            assert res.product == exp.product
            assert res.version == exp.version

        self.mock_get_ports_interface.execute.assert_called_once_with(
            self.postgres_connection)

    def test_execute_no_ports(self):
        self.mock_get_ports_interface.execute.return_value = []
        get_ports = GetPorts(self.mock_get_ports_interface)

        result = get_ports.execute(self.postgres_connection)

        assert result == []

        self.mock_get_ports_interface.execute.assert_called_once_with(
            self.postgres_connection)
